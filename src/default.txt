caden code
import logo from './logo.svg';
import './App.css';
import './api1.js';
function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to road.
        </p>
        <a
          className="App-link bold"
          href="https://youtube.com"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
        <div style={{all: "unset"}}>
          <h1>title</h1>
          <div class="hoverDiv">
              <p>WORRRRRDSSSS</p>
              <h2 class="hidden">I appeared!</h2>
          </div>
          
          <p>WORRRRRDSSSS2</p>
          <p>WORRRRRDSSSS</p>
          <p>WORRRRRDSSSS2</p>
          <p>WORRRRRDSSSS</p>
          <p>WORRRRRDSSSS2</p>
          <p>WORRRRRDSSSS</p>
        </div>
      </header>
    </div>
  );
}

export default App;



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
code froom video

import logo from './logo.svg';
import './App.css';
import './api1.js';

import {useEffect, useState} from "react";


function App() {

  {/*String for client ID and redirect URI,, authentication*/}
  {/*client id from dev dash*/}
  {/*these are needed for user login auth */}
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec"
  const REDIRECT_URI = "http://localhost:3000"
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize"
  const RESPONSE_TYPE = "token"

  {/*retriving the token */}
  const {token, setToken} = useState("")

  useEffect(() => {
    {/*gets token from from local storage if there, otherwise gets it from hash and splits that b */}
    const hash = window.location.hash
    let token = window.localStorage.getItem("token")

    if(!token && hash){
      token = hash.substring(1). split("&"). find(elem => elem.startsWith("access_token")).split("=")[1]
      console.log(token)

      window.location.hash = ""
      window.localStorage.setItem("token", token)
      setToken(token)
    }
    
    
  },[])


  



  return (
    <div className="App">
      <header className="App-header">


        <h1>Literator</h1>
        {/*link for user login*/}
        {/*if no token */}
        {!token ?
        <a href= {`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>Login to Spotify</a> 
        : <button>Logout</button>}
        {/* */}


      </header>
    </div>
  );
}

export default App;

////////////////////////////////////////////////////////////////
default for authentication

import { useEffect, useState } from "react";
import './App.css';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  const [token, setToken] = useState("");

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];
      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Spotify React</h1>
        {!token ? (
          <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
            Login to Spotify
          </a>
        ) : (
          <button onClick={logout}>Logout</button>
        )}
      </header>
    </div>
  );
}

export default App;


////////////////////////////////////////////////////////////////////////////////////////////////////
maanav's latest
import { useEffect, useState } from "react";
import './App.css';
import axios from 'axios';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  {/*contains token*/}
  const [token, setToken] = useState("");

  {/*contains search*/}
  const [searchKey, setSearchKey] = useState("")

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];
      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  {/*method for searching tracks*/}
  const searchTracks = async (e) => {
    e.preventDefault()
    const {data} = await axios.get("https://api.spotify.com/v1/search", {
      headers: {
        Authorization: `Bearer ${token}`
      },
      params: {
        q: searchKey,
        type: "track"
      }
    })
  console.log(data);
}

return (
  <div className="App">
    <header className="App-header">
      <h1>Literator</h1>
      {/*if no token then authenticate, else logout */}
      {!token ? 
      <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
        Login to Spotify</a>
      : <button onClick={logout}>Logout</button>}

      {console.log(token)}
        
      {/*search available if have token, else login*/}
      {token ?
        {/*what we are searching for*/}
        <form onSubmit = {searchTracks}>
          {/*passes event to searchkey and set searchkey to target */}
          <input type = "text" onChange={e => setSearchKey(e.target.value)}/>
          <button type={"submit"}>Search</button>
        </form>
        
        
        : <h2>Please Login</h2>}
        

    </header>
  </div>
);
}

export default App;

//////////////////////////////////////////////////////////////////////////////////////
shake it off


import {useEffect, useState} from "react";
import './App.css';
import axios from 'axios';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec"
  const REDIRECT_URI = "http://localhost:3000"
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize"
  const RESPONSE_TYPE = "token"

    const [token, setToken] = useState("")
    const [searchKey, setSearchKey] = useState("")
    const [tracks, setTracks] = useState([])

    // const getToken = () => {
    //     let urlParams = new URLSearchParams(window.location.hash.replace("#","?"));
    //     let token = urlParams.get('access_token');
    // }

    useEffect(() => {
        const hash = window.location.hash
        let token = window.localStorage.getItem("token")

        // getToken()


        if (!token && hash) {
            token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1]

            window.location.hash = ""
            window.localStorage.setItem("token", token)
        }

        setToken(token)

    }, [])

    const logout = () => {
        setToken("")
        window.localStorage.removeItem("token")
    }

    const searchTracks= async (e) => {
        e.preventDefault()
        const {data} = await axios.get("https://api.spotify.com/v1/search", {
            headers: {
                Authorization: `Bearer ${token}`
            },
            params: {
                q: searchKey,
                type: "track",
                limit: 5
            }
        })
        console.log(data.tracks.items);
        setTracks(data.tracks.items)
    }
    {/*
    const renderArtists = () => {
        return artists.map(artist => (
            <div key={artist.id}>
                {artist.images.length ? <img width={"100%"} src={artist.images[0].url} alt=""/> : <div>No Image</div>}
                {artist.name}
            </div>
        ))
    */}
    const renderTracks = () => {
      return tracks.map(track =>(
        <div key={track.id}>
                {track.name}
            </div>
      ))
    }



    return (
        <div className="App">
            <header className="App-header">
                <h1>Literator</h1>
                {!token ?
                    <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>Login
                        to Spotify</a>
                    : <button onClick={logout}>Logout</button>}

                {token ?
                    <form onSubmit = {searchTracks}>
                        <input type="text" onChange={e => setSearchKey(e.target.value)}/>
                        <button type={"submit"}>Search</button>
                    </form>

                    : <h2>Please login</h2>
                }

                {/*{renderArtists()}*/}
                {renderTracks()}

            </header>
        </div>
    );
}

export default App;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
working select box no lyric


import {useEffect, useState} from "react";
import './App.css';
import axios from 'axios';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec"
  const REDIRECT_URI = "http://localhost:3000"
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize"
  const RESPONSE_TYPE = "token"

    const [token, setToken] = useState("")
    const [searchKey, setSearchKey] = useState("")
    const [tracks, setTracks] = useState([])

    // const getToken = () => {
    //     let urlParams = new URLSearchParams(window.location.hash.replace("#","?"));
    //     let token = urlParams.get('access_token');
    // }

    useEffect(() => {
        const hash = window.location.hash
        let token = window.localStorage.getItem("token")

        // getToken()


        if (!token && hash) {
            token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1]

            window.location.hash = ""
            window.localStorage.setItem("token", token)
        }

        setToken(token)

    }, [])

    const logout = () => {
        setToken("")
        window.localStorage.removeItem("token")
    }

    const searchTracks= async (e) => {
        e.preventDefault()
        const {data} = await axios.get("https://api.spotify.com/v1/search", {
            headers: {
                Authorization: `Bearer ${token}`
            },
            params: {
                q: searchKey,
                type: "track",
                limit: 5
            }
        })
        console.log(data.tracks.items);
        setTracks(data.tracks.items)
    }
    
    const renderTracks1 = () => {
      return tracks.map(track =>(
        <div key={track.id}>
                {track.name}
            </div>
      ))
    }
    const renderTracks2 = () => {
        return tracks.map(track => (
          <button key={track.id} onClick={() => console.log(track.name)}>
            {track.name}
          </button>
        ));
      };




      const [selectedTrack, setSelectedTrack] = useState(null); // To store the selected track ID

      const handleTrackClick = (trackId) => {
          setSelectedTrack(trackId);
      };
      
      const renderTracks3 = () => {
          return tracks.map((track) => (
              <div 
                  key={track.id}
                  onClick={() => handleTrackClick(track.id)} 
                  style={{
                      cursor: "pointer", 
                      backgroundColor: selectedTrack === track.id ? "lightblue" : "transparent",
                      padding: "10px",
                      border: "1px solid black",
                      margin: "5px"
                  }}
              >
                  {track.name} by {track.artists.map(artist => artist.name).join(", ")}
              </div>
          ));
      };
      



      

    return (
        <div className="App">
            <header className="App-header">
                <h1>Literator</h1>
                {!token ?
                    <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>Login
                        to Spotify</a>
                    : <button onClick={logout}>Logout</button>}

                {token ?
                    <form onSubmit = {searchTracks}>
                        <input type="text" onChange={e => setSearchKey(e.target.value)}/>
                        <button type={"submit"}>Search</button>
                    </form>

                    : <h2>Please login</h2>
                }

                {/*{renderArtists()}*/}
                {renderTracks3()}

            </header>
        </div>
    );
}

export default App;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
english lyrics


import { useEffect, useState } from "react";
import './App.css';
import axios from 'axios';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  const [token, setToken] = useState("");
  const [searchKey, setSearchKey] = useState("");
  const [tracks, setTracks] = useState([]);
  const [lyrics, setLyrics] = useState("");
  const [selectedTrack, setSelectedTrack] = useState(null);

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];

      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  const searchTracks = async (e) => {
    e.preventDefault();
    const { data } = await axios.get("https://api.spotify.com/v1/search", {
      headers: {
        Authorization: `Bearer ${token}`
      },
      params: {
        q: searchKey,
        type: "track",
        limit: 5
      }
    });
    console.log(data.tracks.items);
    setTracks(data.tracks.items);
  };

  const handleTrackClick = async (track) => {
    setSelectedTrack(track);
    
    // Fetch lyrics using the Lyrics.ovh API
    const lyricsApiUrl = `https://api.lyrics.ovh/v1/${track.artists[0].name}/${track.name}`;
    
    try {
      const response = await axios.get(lyricsApiUrl);
      setLyrics(response.data.lyrics || "Lyrics not found.");
    } catch (error) {
      console.error("Error fetching lyrics:", error);
      setLyrics("Lyrics not found.");
    }
  };

  const renderTracks = () => {
    return tracks.map((track) => (
      <div
        key={track.id}
        onClick={() => handleTrackClick(track)} 
        style={{
          cursor: "pointer", 
          backgroundColor: selectedTrack && selectedTrack.id === track.id ? "lightblue" : "transparent",
          padding: "10px",
          border: "1px solid black",
          margin: "5px"
        }}
      >
        {track.name} by {track.artists.map(artist => artist.name).join(", ")}
      </div>
    ));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Literator</h1>
        {!token ? (
          <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
            Login to Spotify
          </a>
        ) : (
          <button onClick={logout}>Logout</button>
        )}

        {token ? (
          <form onSubmit={searchTracks}>
            <input type="text" onChange={e => setSearchKey(e.target.value)} />
            <button type={"submit"}>Search</button>
          </form>
        ) : (
          <h2>Please login</h2>
        )}

        {renderTracks()}

        {/* Display lyrics if available */}
        {selectedTrack && (
          <div>
            <h2>Lyrics for {selectedTrack.name}:</h2>
            <pre>{lyrics}</pre>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;
/////////////////////////////////////////////////////////////////////////////////////////////////////4

idek bro
import { useEffect, useState } from "react";
import './App.css';
import axios from 'axios';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  const [token, setToken] = useState("");
  const [searchKey, setSearchKey] = useState("");
  const [tracks, setTracks] = useState([]);
  const [lyrics, setLyrics] = useState("");
  const [selectedTrack, setSelectedTrack] = useState(null);

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];

      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  const searchTracks = async (e) => {
    e.preventDefault();
    const { data } = await axios.get("https://api.spotify.com/v1/search", {
      headers: {
        Authorization: `Bearer ${token}`
      },
      params: {
        q: searchKey,
        type: "track",
        limit: 5
      }
    });
    console.log(data.tracks.items);
    setTracks(data.tracks.items);
  };

  const handleTrackClick = async (track) => {
    setSelectedTrack(track);
    
    // Fetch lyrics using the Lyrics.ovh API
    const lyricsApiUrl = `https://api.lyrics.ovh/v1/${track.artists[0].name}/${track.name}`;
    
    try {
      const response = await axios.get(lyricsApiUrl);
      setLyrics(response.data.lyrics || "Lyrics not found.");
    } catch (error) {
      console.error("Error fetching lyrics:", error);
      setLyrics("Lyrics not found.");
    }
  };

  const renderTracks = () => {
    return tracks.map((track) => (
      <div
        key={track.id}
        onClick={() => handleTrackClick(track)} 
        style={{
          cursor: "pointer", 
          backgroundColor: selectedTrack && selectedTrack.id === track.id ? "lightblue" : "transparent",
          padding: "10px",
          border: "1px solid black",
          margin: "5px"
        }}
      >
        {track.name} by {track.artists.map(artist => artist.name).join(", ")}
      </div>
    ));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Literator</h1>
        {!token ? (
          <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
            Login to Spotify
          </a>
        ) : (
          <button onClick={logout}>Logout</button>
        )}

        {token ? (
          <form onSubmit={searchTracks}>
            <input type="text" onChange={e => setSearchKey(e.target.value)} />
            <button type={"submit"}>Search</button>
          </form>
        ) : (
          <h2>Please login</h2>
        )}

        {renderTracks()}

        {/* Display lyrics if available */}
        {selectedTrack && (
          <div>
            <h2>Lyrics for {selectedTrack.name}:</h2>
            <pre>{lyrics}</pre>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
english lyrics limited commented out 


import { useEffect, useState } from "react";
import './App.css';
import axios from 'axios';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  const [token, setToken] = useState("");
  const [searchKey, setSearchKey] = useState("");
  const [tracks, setTracks] = useState([]);
  const [lyrics, setLyrics] = useState("");
  const [selectedTrack, setSelectedTrack] = useState(null);

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];

      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  const searchTracks = async (e) => {
    e.preventDefault();
    const { data } = await axios.get("https://api.spotify.com/v1/search", {
      headers: {
        Authorization: `Bearer ${token}`
      },
      params: {
        q: searchKey,
        type: "track",
        limit: 5
      }
    });
    console.log(data.tracks.items);
    setTracks(data.tracks.items);
  };

  const handleTrackClick = async (track) => {
    setSelectedTrack(track);
    
    // Fetch lyrics using the Lyrics.ovh API
    {/*
    const lyricsApiUrl = `https://api.lyrics.ovh/v1/${track.artists[0].name}/${track.name}`;
    
    try {
      const response = await axios.get(lyricsApiUrl);
      setLyrics(response.data.lyrics || "Lyrics not found.");
    } catch (error) {
      console.error("Error fetching lyrics:", error);
      setLyrics("Lyrics not found.");
    }
  };
    */}

  


  const renderTracks = () => {
    return tracks.map((track) => (
      <div
        key={track.id}
        onClick={() => handleTrackClick(track)} 
        style={{
          cursor: "pointer", 
          backgroundColor: selectedTrack && selectedTrack.id === track.id ? "lightblue" : "transparent",
          padding: "10px",
          border: "1px solid black",
          margin: "5px"
        }}
      >
        {track.name} by {track.artists.map(artist => artist.name).join(", ")}
      </div>
    ));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Literator</h1>
        {!token ? (
          <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
            Login to Spotify
          </a>
        ) : (
          <button onClick={logout}>Logout</button>
        )}

        {token ? (
          <form onSubmit={searchTracks}>
            <input type="text" onChange={e => setSearchKey(e.target.value)} />
            <button type={"submit"}>Search</button>
          </form>
        ) : (
          <h2>Please login</h2>
        )}

        {renderTracks()}

        {/* Display lyrics if available */}
        {selectedTrack && (
          <div>
            <h2>Lyrics for {selectedTrack.name}:</h2>
            <pre>{lyrics}</pre>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;
