web scrape

import { useEffect, useState } from "react";
import './App.css';
import axios from 'axios';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  const [token, setToken] = useState("");
  const [searchKey, setSearchKey] = useState("");
  const [tracks, setTracks] = useState([]);
  const [lyrics, setLyrics] = useState("");
  const [selectedTrack, setSelectedTrack] = useState(null);

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];

      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  const searchTracks = async (e) => {
    e.preventDefault();
    const { data } = await axios.get("https://api.spotify.com/v1/search", {
      headers: {
        Authorization: `Bearer ${token}`
      },
      params: {
        q: searchKey,
        type: "track",
        limit: 5
      }
    });
    console.log(data.tracks.items);
    setTracks(data.tracks.items);
  };

  const handleTrackClick = async (track) => {
    setSelectedTrack(track);

    const artistName = track.artists[0].name;
    const songName = track.name;
  }
    // Fetch lyrics from your backend
    const axios = require('axios');
const cheerio = require('cheerio');

/**
 * Scrapes lyrics from a given URL.
 * @param {string} url - The URL of the lyrics page.
 * @returns {Promise<string|null>} - A promise that resolves to the lyrics as a string or null if not found.
 */
const scrapeLyrics = async (url) => {
  try {
    // Fetch the HTML from the URL
    const { data } = await axios.get(url);

    // Load the HTML into cheerio
    const $ = cheerio.load(data);

    // Select the lyrics element (update the selector based on the target site)
    const lyrics = $('.lyrics').text().trim(); // Change '.lyrics' to the correct selector

    // Return the scraped lyrics
    return lyrics || null;
  } catch (error) {
    console.error('Error fetching lyrics:', error);
    return null;
  }
};
  const renderTracks = () => {
    return tracks.map((track) => (
      <div
        key={track.id}
        onClick={() => handleTrackClick(track)} 
        style={{
          cursor: "pointer", 
          backgroundColor: selectedTrack && selectedTrack.id === track.id ? "lightblue" : "transparent",
          padding: "10px",
          border: "1px solid black",
          margin: "5px"
        }}
      >
        
        {track.name} by {track.artists.map(artist => artist.name).join(", ")}
      </div>
    ));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Literator</h1>
        {!token ? (
          <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
            Login to Spotify
          </a>
        ) : (
          <button onClick={logout}>Logout</button>
        )}

        {token ? (
          <form onSubmit={searchTracks}>
            <input type="text" onChange={e => setSearchKey(e.target.value)} />
            <button type={"submit"}>Search</button>
          </form>
        ) : (
          <h2>Please login</h2>
        )}

        {renderTracks()}
        
        {scrapeLyrics(url)}

        {/* Display lyrics if available */}
        {selectedTrack && (
          <div>
            <h2>Lyrics for {selectedTrack.name}:</h2>
            <pre>{lyrics}</pre>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

no work webscraper

import { useEffect, useState } from "react";
import './App.css';
import axios from 'axios';

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  const [token, setToken] = useState("");
  const [searchKey, setSearchKey] = useState("");
  const [tracks, setTracks] = useState([]);
  const [lyrics, setLyrics] = useState("");
  const [selectedTrack, setSelectedTrack] = useState(null);

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];

      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  const searchTracks = async (e) => {
    e.preventDefault();
    const { data } = await axios.get("https://api.spotify.com/v1/search", {
      headers: {
        Authorization: `Bearer ${token}`
      },
      params: {
        q: searchKey,
        type: "track",
        limit: 5
      }
    });
    console.log(data.tracks.items);
    setTracks(data.tracks.items);
  };



{/** 
  const axios = require('axios');
  */}
  const cheerio = require('cheerio');
  

  /**
   * Scrapes lyrics from a given URL.
   * @param {string} url - The URL of the lyrics page.
   * @returns {Promise<string|null>} - A promise that resolves to the lyrics as a string or null if not found.
   */
  const scrapeLyrics = async (url) => {
    try {
      // Fetch the HTML from the URL
      const { data } = await axios.get(url);
  
      // Load the HTML into cheerio
      const $ = cheerio.load(data);
  
      // Select the lyrics element (update the selector based on the target site)
      const lyrics = $('.lyrics').text().trim(); // Change '.lyrics' to the correct selector
  
      // Return the scraped lyrics
      return lyrics || null;
    } catch (error) {
      console.error('Error fetching lyrics:', error);
      return null;
    }
  };






  
  const handleTrackClick = async (track) => {
    setSelectedTrack(track);
    
    // Fetch lyrics using the Lyrics.ovh API
    {/** 
    const lyricsApiUrl = `https://api.lyrics.ovh/v1/${track.artists[0].name}/${track.name}`;
    
    try {
      const response = await axios.get(lyricsApiUrl);
      setLyrics(response.data.lyrics || "Lyrics not found.");
    } catch (error) {
      console.error("Error fetching lyrics:", error);
      setLyrics("Lyrics not found.");
    }
      */}

    //fetching lyrics through webscraping

    const lyricsWSUrl = `https://gaana.com/song/${track.name}`;

    {scrapeLyrics(lyricsWSUrl)}

    {/** 
    try {
        const response = await axios.get(lyricsWSUrl);
        setLyrics(response.data.lyrics || "Lyrics not found.");
      } catch (error) {
        console.error("Error fetching lyrics:", error);
        setLyrics("Lyrics not found.");
      }
        */}
  };

  const renderTracks = () => {
    return tracks.map((track) => (
      <div
        key={track.id}
        onClick={() => handleTrackClick(track)} 
        style={{
          cursor: "pointer", 
          backgroundColor: selectedTrack && selectedTrack.id === track.id ? "lightblue" : "transparent",
          padding: "10px",
          border: "1px solid black",
          margin: "5px"
        }}
      >
        {track.name} by {track.artists.map(artist => artist.name).join(", ")}
      </div>
    ));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Literator</h1>
        {!token ? (
          <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
            Login to Spotify
          </a>
        ) : (
          <button onClick={logout}>Logout</button>
        )}

        {token ? (
          <form onSubmit={searchTracks}>
            <input type="text" onChange={e => setSearchKey(e.target.value)} />
            <button type={"submit"}>Search</button>
          </form>
        ) : (
          <h2>Please login</h2>
        )}

        {renderTracks()}

        {/* Display lyrics if available */}
        {selectedTrack && (
          <div>
            <h2>Lyrics for {selectedTrack.name}:</h2>
            <pre>{lyrics}</pre>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;


///////////////////////////////////////////////////////////////////////////////////
gaana.com working version

import { useEffect, useState } from "react";
import './App.css';
import axios from 'axios';


function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  const [token, setToken] = useState("");
  const [searchKey, setSearchKey] = useState("");
  const [tracks, setTracks] = useState([]);
  const [lyrics, setLyrics] = useState("");
  const [selectedTrack, setSelectedTrack] = useState(null);

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];
      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  const searchTracks = async (e) => {
    e.preventDefault();
    const { data } = await axios.get("https://api.spotify.com/v1/search", {
      headers: {
        Authorization: `Bearer ${token}`
      },
      params: {
        q: searchKey,
        type: "track",
        limit: 5
      }
    });
    setTracks(data.tracks.items);
  };

  
  const scrapeLyrics = async (url) => {
    const cheerio = require('cheerio');
    try {
      const { data } = await axios.get(url);
      const $ = cheerio.load(data);
      const lyrics = $('.lyrics').text().trim(); // Update this selector based on the target site
      return lyrics || null;
    } catch (error) {
      console.error('Error fetching lyrics:', error);
      return null;
    }
  };

  const handleTrackClick = async (track) => {
    setSelectedTrack(track);
    
    // Format the track name for the URL
    const formattedTrackName = track.name.toLowerCase().replace(/\s+/g, '-');
    const lyricsWSUrl = `https://gaana.com/song/${formattedTrackName}`;
    

    // Fetch lyrics using web scraping
    const scrapedLyrics = await scrapeLyrics(lyricsWSUrl);
    
    if (scrapedLyrics) {
      setLyrics(scrapedLyrics);
    } else {
      setLyrics("Lyrics not found.");
    }
  };

  const renderTracks = () => {
    return tracks.map((track) => (
      <div
        key={track.id}
        onClick={() => handleTrackClick(track)} 
        style={{
          cursor: "pointer", 
          backgroundColor: selectedTrack && selectedTrack.id === track.id ? "lightblue" : "transparent",
          padding: "10px",
          border: "1px solid black",
          margin: "5px"
        }}
      >
        {track.name} by {track.artists.map(artist => artist.name).join(", ")}
      </div>
    ));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Literator</h1>
        {!token ? (
          <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
            Login to Spotify
          </a>
        ) : (
          <button onClick={logout}>Logout</button>
        )}

        {token ? (
          <form onSubmit={searchTracks}>
            <input type="text" onChange={e => setSearchKey(e.target.value)} />
            <button type={"submit"}>Search</button>
          </form>
        ) : (
          <h2>Please login</h2>
        )}

        {renderTracks()}

        {/* Display lyrics if available */}
        {selectedTrack && (
          <div>
            <h2>Lyrics for {selectedTrack.name}:</h2>
            <pre>{lyrics}</pre>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
3 errors lyric finder


import { useEffect, useState } from "react";
import './App.css';
import axios from 'axios';
import lyricsFinder from 'lyrics-finder'; // Importing correctly at the top

function App() {
  const CLIENT_ID = "cfb3c3c2eb7241508dbccf42a08ba1ec";
  const REDIRECT_URI = "http://localhost:3000";
  const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize";
  const RESPONSE_TYPE = "token";

  const [token, setToken] = useState("");
  const [searchKey, setSearchKey] = useState("");
  const [tracks, setTracks] = useState([]);
  const [lyrics, setLyrics] = useState("");
  const [selectedTrack, setSelectedTrack] = useState(null);

  useEffect(() => {
    const hash = window.location.hash;
    let token = window.localStorage.getItem("token");

    if (!token && hash) {
      token = hash.substring(1).split("&").find(elem => elem.startsWith("access_token")).split("=")[1];
      window.location.hash = "";
      window.localStorage.setItem("token", token);
    }

    setToken(token);
  }, []);

  const logout = () => {
    setToken("");
    window.localStorage.removeItem("token");
  };

  const searchTracks = async (e) => {
    e.preventDefault();
    const { data } = await axios.get("https://api.spotify.com/v1/search", {
      headers: {
        Authorization: `Bearer ${token}`
      },
      params: {
        q: searchKey,
        type: "track",
        limit: 5
      }
    });
    setTracks(data.tracks.items);
  };

  const getLyrics = async (artist, song) => {
    try {
      const lyrics = await lyricsFinder(artist, song) || "No Lyrics Found";
      return lyrics;
    } catch (error) {
      console.error("Error fetching lyrics:", error);
      return "Error fetching lyrics"; // Return an error message
    }
  };

  const handleTrackClick = async (track) => {
    setSelectedTrack(track);
    const artistNames = track.artists.map(artist => artist.name).join(", ");
    const lyrics = await getLyrics(artistNames, track.name); // Await the lyrics fetching
    setLyrics(lyrics);
  };

  const renderTracks = () => {
    return tracks.map((track) => (
      <div
        key={track.id}
        onClick={() => handleTrackClick(track)} 
        style={{
          cursor: "pointer", 
          backgroundColor: selectedTrack && selectedTrack.id === track.id ? "lightblue" : "transparent",
          padding: "10px",
          border: "1px solid black",
          margin: "5px"
        }}
      >
        {track.name} by {track.artists.map(artist => artist.name).join(", ")}
      </div>
    ));
  };

  return (
    <div className="App">
      <header className="App-header">
        <h1>Literator</h1>
        {!token ? (
          <a href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=${RESPONSE_TYPE}`}>
            Login to Spotify
          </a>
        ) : (
          <button onClick={logout}>Logout</button>
        )}

        {token ? (
          <form onSubmit={searchTracks}>
            <input type="text" onChange={e => setSearchKey(e.target.value)} />
            <button type={"submit"}>Search</button>
          </form>
        ) : (
          <h2>Please login</h2>
        )}

        {renderTracks()}

        {/* Display lyrics if available */}
        {selectedTrack && (
          <div>
            <h2>Lyrics for "{selectedTrack.name}":</h2>
            <pre>{lyrics}</pre>
          </div>
        )}
      </header>
    </div>
  );
}

export default App;
